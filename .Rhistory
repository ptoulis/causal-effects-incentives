source('~/A/code/repos/causal-effects-incentives/terminology.R')
empty.game(10)
source('~/A/code/repos/causal-effects-incentives/terminology.R')
empty.game(10)
g = empty.game(10)
names(g)
source('~/A/code/repos/causal-effects-incentives/terminology.R')
source('~/A/code/repos/causal-effects-incentives/terminology.R')
source('~/A/code/repos/causal-effects-incentives/terminology.R')
source("../kidney-exchange/rke.R")
empty.game()
empty.game(20)
source('~/A/code/repos/causal-effects-incentives/terminology.R')
empty.game(20)
source('~/A/code/repos/causal-effects-incentives/terminology.R')
empty.game(20)
g = empty.game(20)
g$hsize = rnorm(20, mean=100)
g
g$hsize = rnorm(20, mean=10, sd=20)
g
g$hid = rpois(20)
g$hid = rpois(20, lambda=500)
g
g = subset(g, hid==483)
g
g$hid
source('~/A/code/repos/causal-effects-incentives/terminology.R')
g = empty.game(20)
source('~/A/code/repos/causal-effects-incentives/terminology.R')
g = empty.game(20)
source('~/A/code/repos/causal-effects-incentives/terminology.R')
g = empty.game(20)
g
source('~/A/code/repos/causal-effects-incentives/terminology.R')
g = empty.game(5)
g
g[1,]$Ut = 20
g[2,]$Uc=10
g
g[1,]$Uc=10
g
g[1,]$hid = 100
f
g
CHECK_game(g)
source('~/A/code/repos/causal-effects-incentives/terminology.R')
g = empty.game(5)
g
g[1,]$hid = 100
g[1,]$Uc=10
g[1,]$Ut=15
g
ucb.strategy(g, 100)
source('~/A/code/repos/causal-effects-incentives/terminology.R')
ucb.strategy(g, 100)
CHECK_TRUE
CHECK_game(g)
CHECK_GE(nrow(g), 0)
CHECK_SETEQ(names(g), kFields)
CHECK_TRUE(g$nt > 0)
source('~/A/code/repos/causal-effects-incentives/terminology.R')
g
ucb.strategy(g, 100)
ucb.strategy(g, 100)
ucb.strategy(g, 100)
ucb.strategy(g, 100)
ucb.strategy(g, 100)
ucb.strategy(g, 100)
ucb.strategy(g, 100)
ucb.strategy(g, 100)
ucb.strategy(g, 100)
ucb.strategy(g, 100)
ucb.strategy(g, 100)
ucb.strategy(g, 100)
g
source('~/A/code/repos/causal-effects-incentives/terminology.R')
ucb.strategy(g, 100)
g
g
ucb.strategy(g, 100)
ucb.strategy(g, 100)
ucb.strategy(g, 100)
ucb.strategy(g, 100)
ucb.strategy(g, 100)
ucb.strategy(g, 100)
ucb.strategy(g, 100)
ucb.strategy(g, 100)
ucb.strategy(g, 100)
ucb.strategy(g, 100)
ucb.strategy(g, 100)
ucb.strategy(g, 100)
ucb.strategy(g, 100)
ucb.strategy(g, 100)
g
g[1,]$Uc=15
g
x = replicate(100, { ucb.strategy(g, 100)})
x
x = replicate(1000, { ucb.strategy(g, 100)})
x = x[x=="t"]
x
x = replicate(1000, { ucb.strategy(g, 100)})
x=="t"
y = as.numeric(x=="t")
y
hist(y)
source('~/A/code/repos/causal-effects-incentives/terminology.R')
g
source('~/A/code/repos/causal-effects-incentives/terminology.R')
g
update.game(g, 100, "t", 100)
source('~/A/code/repos/causal-effects-incentives/terminology.R')
update.game(g, 100, "t", 100)
g
g2 = update.game(g, 100, "t", 100)
g2
ucb.strategy(g2, 100)
x = rep(5, 10)
diff(x)
x
library(logging)
rke
source("../kidney-exchange/rke.R")
rke= rrke(20)
rke= rrke(10)
source("../kidney-exchange/terminology.R")
rke= rrke(10)
rke$pairs
table(rke$pairs$pair.type)
rke= rrke(100)
rke= rrke(1000)
head(rke$pairs)
nrow(subset(rke$pairs, desc=="A-O"))
306 / 1000
kPairs
sum(kPairs$prob)
nrow(subset(rke$pairs, desc=="A-O"))
head(rke$pairs)
nrow(subset(rke$pairs, desc=="O-O"))
kPairs
pr <- kPairs$prob
pr = pr * kPairs$blood.compatible
pr
pr  - 0.8 * pr * kPairs$blood.compatible
pr
pr <- kPairs$prob
pr  - 0.8 * pr * kPairs$blood.compatible
kPairs
pr
i = kPairs$blood.compatible
i
j = 1-i
j
j + 0.2 * i
(j + 0.2 * i) * kPairs$prob
pr = (j + 0.2 * i) * kPairs$prob
pr
sum(pr)
pr / sum(pr)
source("../kidney-exchange/terminology.R")
kPairs
nrow(rke$pairs)
head(rke$pairs, 20)
nrow(subset(rke$pairs, desc=="AB-O"))
45/100
45/1000
subset(kPairs, desc=="AB-O")
nrow(subset(rke$pairs, desc=="O-AB"))
subset(kPairs, desc=="O-AB")
nrow(subset(rke$pairs, desc=="B-O"))
154/1000
subset(kPairs, desc=="B-O")
table(rke$pairs$desc)
table(kPairs$desc)
kPairs
table(rke$pairs$desc)
tab = table(rke$pairs$desc)
names(tab)
probs <- sapply(names(tab), function(i) subset(kPairs$desc==i)$prob)
probs <- sapply(names(tab), function(i) subset(kPairs, desc==i)$prob)
probs
chisq.test(tab)
chisq.test(tab, p=probs)
tab
probs
probs * 1000
tab
tab[1]
tab[3] <- 0
tab
chisq.test(tab, p=probs)
as.numeric(tab)
x = as.numeric(tab)
dmultinom(x, size=sum(x), prob=probs)
probs
x
probs * 1000
x[3] <- 91
probs * 1000
x
dmultinom(x, size=sum(x), prob=probs)
dmultinom(x, size=sum(x), prob=x / sum(x))
tab
names(tab)
kPairs
tab
?table
rke = rrke(10)
rke$pairs
table(rke$desc)
table(rke$pairs$desc
)
rke$pairs
table(rke$pairs$desc)
rke$pairs$desc
rm(list=ls())
source("../kidney-exchange/terminology.R")
source("../r-toolkit/checks.R")
source("../kidney-exchange/terminology.R")
rke = rrke(10)
rke$pairs
rke$pairs$desc
table(rke$pairs$desc)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
x = c("t", "t", "c")
which(x=="t")
which(x=="ff")
a = which(x=="ff")
a
y = c(1,2,3)
x
U[a]
a
y
y[a]
rbinom(10, size=1, prob=c(0, 0, 0.95, 0.8, 0.5))
rbinom(5, size=1, prob=c(0, 0, 0.95, 0.8, 0.5))
rbinom(5, size=1, prob=c(0, 0, 0.95, 0.8, 0.5))
rbinom(5, size=1, prob=c(0, 0, 0.95, 0.8, 0.5))
rbinom(5, size=1, prob=c(0, 0, 0.95, 0.8, 0.5))
rbinom(5, size=1, prob=c(0, 0, 0.95, 0.8, 0.5))
rbinom(5, size=1, prob=c(0, 0, 0.95, 0.8, 0.5))
rbinom(5, size=1, prob=c(0, 0, 0.95, 0.8, 0.5))
rbinom(5, size=1, prob=c(0, 0, 0.95, 0.8, 0.5))
rbinom(5, size=1, prob=c(0, 0, 0.95, 0.8, 0.5))
rbinom(5, size=1, prob=c(0, 0, 0.95, 0.8, 0.5))
rbinom(5, size=1, prob=c(0, 0, 0.99, 0.8, 0.5))
rbinom(5, size=1, prob=c(0, 0, 0.99, 0.8, 0.5))
rbinom(5, size=1, prob=c(0, 0, 0.99, 0.8, 0.5))
rbinom(5, size=1, prob=c(0, 0, 0.99, 0.8, 0.5))
rbinom(5, size=1, prob=c(0, 0, 0.99, 0.8, 0.5))
rbinom(5, size=1, prob=c(0, 0, 0.99, 0.8, 0.5))
rbinom(5, size=1, prob=c(0, 0, 0.99, 0.8, 0.5))
rbinom(5, size=1, prob=c(0, 0, 0.99, 0.8, 0.5))
rbinom(5, size=1, prob=c(0, 0, 0.99, 0.8, 0.5))
rbinom(5, size=1, prob=c(0, 0, 0.99, 0.8, 0.5))
rbinom(5, size=1, prob=c(0, 0, 0.99, 0.8, 0.5))
rbinom(5, size=1, prob=c(0, 0, 0.99, 0.8, 0.5))
rbinom(5, size=1, prob=c(0, 0, 0.99, 0.8, 0.5))
rbinom(5, size=1, prob=c(0, 0, 0.99, 0.8, 0.5))
rbinom(5, size=1, prob=c(0, 0, 0.99, 0.8, 0.5))
rbinom(5, size=1, prob=c(0, 0, 0.99, 0.8, 0.5))
rbinom(5, size=1, prob=c(0, 0, 0.99, 0.8, 0.5))
rbinom(5, size=1, prob=c(0, 0, 0.99, 0.8, 0.5))
rbinom(5, size=1, prob=c(0, 0, 0.99, 0.8, 0.5))
rbinom(5, size=1, prob=c(0, 0, 0.99, 0.8, 0.5))
rbinom(5, size=1, prob=c(0, 0, 0.99, 0.8, 0.5))
rbinom(5, size=1, prob=c(0, 0, 0.99, 0.8, 0.5))
rbinom(5, size=1, prob=c(0, 0, 0.99, 0.8, 0.5))
rbinom(5, size=1, prob=c(0, 0, 0.99, 0.8, 0.5))
rbinom(5, size=1, prob=c(0, 0, 0.99, 0.8, 0.5))
rbinom(5, size=1, prob=c(0, 0, 0.99, 0.8, 0.5))
rbinom(5, size=1, prob=c(0, 0, 0.99, 0.8, 0.5))
rbinom(5, size=1, prob=c(0, 0, 0.99, 0.8, 0.5))
rbinom(5, size=1, prob=c(0, 0, 0.99, 0.8, 0.5))
rbinom(5, size=1, prob=c(0, 0, 0.99, 0.8, 0.5))
rbinom(5, size=1, prob=c(0, 0, 0.99, 0.8, 0.5))
rbinom(5, size=1, prob=c(0, 0, 0.99, 0.8, 0.5))
rbinom(5, size=1, prob=c(0, 0, 0.99, 0.8, 0.5))
rbinom(5, size=1, prob=c(0, 0, 0.99, 0.8, 0.5))
rbinom(5, size=1, prob=c(0, 0, 0.99, 0.8, 0.5))
rbinom(5, size=1, prob=c(0, 0, 0.99, 0.8, 0.5))
rbinom(5, size=1, prob=c(0, 0, 0.99, 0.8, 0.5))
rbinom(5, size=1, prob=c(0, 0, 0.99, 0.8, 0.5))
source('~/A/code/repos/causal-effects-incentives/causal-models.R')
proc.time["elapsed"]
proc.time()
proc.time()["elapsed"]
proc.time()["elapsed"]
proc.time()["elapsed"]
proc.time()["elapsed"]
load("cache/gi.density.Rdata")
gi.density
plot(gi.density)
load("cache/Uframe-rCM.Rdata")
Urcm
load("cache/Uframe-xCM.Rdata")
Uxcm
source('~/.active-rstudio-document')
?jitter
x = rep(1, 100)
hist(x)
summary(jitter(x, 0.5))
summary(jitter(x, factor=1, amount=0.05))
load(file="out/boot.Rdata")
boot
hist(jitter(boot, amount=0.05, factor=1))
hist(jitter(boot, amount=0.05, factor=1), main="Bootstrap estimator")
hist(jitter(boot, amount=0.05, factor=1), xlab=c(-1, 1), main="Bootstrap estimator")
hist(jitter(boot, amount=0.05, factor=1), xlim=c(-1, 1), main="Bootstrap estimator")
mean(x)
mean(boot)
bootstrap.mean(x)
bootstrap.mean
bootstrap.mean(boot)
load(file="out/boot.Rdata")
boot
mean(boot)
bootstrap.mean(boot)
load(file="out/boot.Rdata")
mean(boot)
bootstrap.mean(boot)
hist(boot, add=T)
hist(boot)
load("out/boot.Rdata")
boot.line
plot(boot.line)
plot(boot.line, type="l")
